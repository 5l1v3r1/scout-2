
#ifdef GET_DIAG_ARRAYS
static const short DiagSubGroup0[] = { 60, -1 };
static const short DiagArray1[] = { diag::warn_pragma_message, -1 };
static const short DiagArray2[] = { diag::pp_hash_warning, -1 };
static const short DiagArray3[] = { diag::warn_explicit_instantiation_must_be_global_0x, diag::warn_explicit_instantiation_out_of_scope_0x, -1 };
static const short DiagArray6[] = { diag::ext_typecheck_addrof_class_temporary, -1 };
static const short DiagSubGroup8[] = { 109, 129, -1 };
static const short DiagArray9[] = { diag::ext_nested_name_member_ref_lookup_ambiguous, -1 };
static const short DiagArray10[] = { diag::err_arc_indirect_no_lifetime, -1 };
static const short DiagSubGroup10[] = { 11, 14, 13, 12, -1 };
static const short DiagArray11[] = { diag::warn_arc_non_pod_class_with_object_member, diag::warn_arc_trivial_member_function_with_object_member, diag::warn_err_new_delete_object_array, -1 };
static const short DiagArray12[] = { diag::warn_arc_object_memaccess, -1 };
static const short DiagArray13[] = { diag::warn_arc_retain_cycle, -1 };
static const short DiagArray14[] = { diag::warn_arc_retained_assign, -1 };
static const short DiagArray15[] = { diag::warn_array_index_exceeds_bounds, diag::warn_array_index_precedes_bounds, -1 };
static const short DiagSubGroup16[] = { 78, 40, -1 };
static const short DiagArray17[] = { diag::warn_unknown_attribute_ignored, -1 };
static const short DiagArray20[] = { diag::ext_rvalue_to_reference_access_ctor, diag::ext_rvalue_to_reference_temp_copy_no_viable, -1 };
static const short DiagArray21[] = { diag::warn_bitwise_and_in_bitwise_or, -1 };
static const short DiagArray22[] = { diag::warn_impcast_bool_to_null_pointer, -1 };
static const short DiagArray23[] = { diag::pp_redef_builtin_macro, -1 };
static const short DiagArray24[] = { diag::ext_empty_struct_union, -1 };
static const short DiagArray25[] = { diag::ext_hexconstant_cplusplus, -1 };
static const short DiagArray26[] = { diag::warn_explicit_instantiation_unqualified_wrong_namespace_0x, -1 };
static const short DiagSubGroup26[] = { 25, -1 };
static const short DiagArray27[] = { diag::ext_alias_declaration, diag::ext_array_size_conversion, diag::ext_explicit_instantiation_after_specialization, diag::ext_generalized_initializer_lists, diag::ext_inline_namespace, diag::ext_nonclass_type_friend, diag::ext_override_control_keyword, diag::ext_ref_qualifier, diag::ext_rvalue_reference, diag::ext_template_outside_of_template, diag::ext_template_parameter_default_in_function_template, diag::ext_template_spec_decl_out_of_scope, diag::ext_template_spec_decl_out_of_scope_global, diag::ext_typename_outside_of_template, diag::ext_unelaborated_friend_type, diag::ext_variadic_templates, diag::warn_defaulted_function_accepted_as_extension, diag::warn_deleted_function_accepted_as_extension, diag::warn_explicit_conversion_functions, diag::warn_nonstatic_member_init_accepted_as_extension, -1 };
static const short DiagSubGroup27[] = { 28, -1 };
static const short DiagArray28[] = { diag::ext_in_class_initializer_float_type, -1 };
static const short DiagArray29[] = { diag::warn_cast_align, -1 };
static const short DiagArray32[] = { diag::warn_subscript_is_char, -1 };
static const short DiagArray33[] = { diag::escaped_newline_block_comment_end, diag::ext_bcpl_comment, diag::ext_multi_line_bcpl_comment, diag::warn_nested_block_comment, -1 };
static const short DiagSubGroup34[] = { 33, -1 };
static const short DiagArray35[] = { diag::warn_maybe_uninit_var, diag::warn_maybe_uninit_var_captured_by_block, -1 };
static const short DiagArray36[] = { diag::warn_impcast_bitfield_precision_constant, diag::warn_impcast_integer_precision_constant, -1 };
static const short DiagArray37[] = { diag::warn_logical_instead_of_bitwise, -1 };
static const short DiagArray38[] = { diag::warn_impcast_complex_scalar, diag::warn_impcast_different_enum_types, diag::warn_impcast_float_integer, diag::warn_impcast_float_precision, diag::warn_impcast_integer_precision, diag::warn_impcast_null_pointer_to_integer, diag::warn_impcast_vector_scalar, diag::warn_template_arg_negative, diag::warn_template_arg_too_large, -1 };
static const short DiagSubGroup38[] = { 145, 36, 93, 147, 22, -1 };
static const short DiagArray40[] = { diag::warn_default_atomic_custom_getter_setter, -1 };
static const short DiagArray41[] = { diag::ext_mixed_decls_code, -1 };
static const short DiagArray42[] = { diag::warn_default_arg_makes_ctor_special, -1 };
static const short DiagArray43[] = { diag::note_it_delegates_to, diag::note_which_delegates_to, diag::warn_delegating_ctor_cycle, -1 };
static const short DiagArray44[] = { diag::warn_delete_non_virtual_dtor, -1 };
static const short DiagArray45[] = { diag::warn_access_decl_deprecated, diag::warn_drv_treating_input_as_cxx, diag::warn_increment_bool, diag::warn_vector_long_decl_spec_combination, -1 };
static const short DiagSubGroup45[] = { 46, -1 };
static const short DiagArray46[] = { diag::warn_deprecated, diag::warn_deprecated_fwdclass_message, diag::warn_deprecated_message, -1 };
static const short DiagArray47[] = { diag::warn_deprecated_def, -1 };
static const short DiagArray48[] = { diag::warn_deprecated_string_literal_conversion, -1 };
static const short DiagArray51[] = { diag::warn_conflicting_param_modifiers, diag::warn_conflicting_ret_type_modifiers, -1 };
static const short DiagArray53[] = { diag::warn_method_param_declaration, -1 };
static const short DiagArray54[] = { diag::warn_dyn_class_memaccess, -1 };
static const short DiagArray56[] = { diag::warn_empty_if_body, -1 };
static const short DiagSubGroup57[] = { 61, -1 };
static const short DiagArray58[] = { diag::warn_comparison_of_mixed_enum_types, -1 };
static const short DiagArray59[] = { diag::warn_exit_time_destructor, -1 };
static const short DiagSubGroup60[] = { 104, 76, 85, 140, 146, 192, -1 };
static const short DiagArray61[] = { diag::ext_pp_extra_tokens_at_eol, -1 };
static const short DiagArray62[] = { diag::warn_floatingpoint_eq, -1 };
static const short DiagArray63[] = { diag::warn_format_invalid_conversion, diag::warn_format_invalid_positional_specifier, diag::warn_format_mix_positional_nonpositional_args, diag::warn_format_nonsensical_length, diag::warn_format_string_is_wide_literal, diag::warn_format_zero_positional_specifier, diag::warn_missing_format_string, diag::warn_printf_asterisk_wrong_type, diag::warn_printf_conversion_argument_type_mismatch, diag::warn_printf_format_string_contains_null_char, diag::warn_printf_ignored_flag, diag::warn_printf_incomplete_specifier, diag::warn_printf_insufficient_data_args, diag::warn_printf_nonsensical_flag, diag::warn_printf_nonsensical_optional_amount, diag::warn_printf_positional_arg_exceeds_data_args, diag::warn_scanf_nonzero_width, diag::warn_scanf_scanlist_incomplete, -1 };
static const short DiagSubGroup63[] = { 64, 68, 117, 66, 67, -1 };
static const short DiagArray64[] = { diag::warn_printf_data_arg_not_used, -1 };
static const short DiagArray65[] = { diag::warn_format_nonliteral, -1 };
static const short DiagSubGroup65[] = { 66, -1 };
static const short DiagArray66[] = { diag::warn_format_nonliteral_noargs, diag::warn_printf_write_back, -1 };
static const short DiagArray68[] = { diag::warn_empty_format_string, -1 };
static const short DiagSubGroup69[] = { 65, 66, 67, -1 };
static const short DiagArray70[] = { diag::ext_four_char_character_literal, -1 };
static const short DiagArray71[] = { diag::warn_global_constructor, diag::warn_global_destructor, -1 };
static const short DiagArray72[] = { diag::ext_anonymous_struct, diag::ext_anonymous_union, diag::ext_flexible_array_empty_aggregate_gnu, diag::ext_flexible_array_init, diag::ext_flexible_array_union_gnu, diag::ext_forward_ref_enum_def, diag::ext_gnu_address_of_label, diag::ext_gnu_case_range, diag::ext_gnu_conditional_expr, diag::ext_gnu_empty_initializer, diag::ext_gnu_indirect_goto, diag::ext_gnu_local_label, diag::ext_gnu_statement_expr, diag::ext_qualified_function_type_template_arg, diag::ext_typecheck_expression_not_constant_but_accepted, diag::ext_variable_sized_type_in_struct, -1 };
static const short DiagSubGroup72[] = { 73, 198, -1 };
static const short DiagArray73[] = { diag::ext_gnu_array_range, diag::ext_gnu_missing_equal_designator, diag::ext_gnu_old_style_field_designator, -1 };
static const short DiagArray74[] = { diag::warn_using_directive_in_header, -1 };
static const short DiagArray75[] = { diag::warn_condition_is_idiomatic_assignment, -1 };
static const short DiagArray76[] = { diag::warn_qual_return_type, -1 };
static const short DiagSubGroup77[] = { 79, 80, -1 };
static const short DiagArray78[] = { diag::warn_auto_implicit_atomic_property, diag::warn_implicit_atomic_property, -1 };
static const short DiagArray79[] = { diag::ext_implicit_function_decl, diag::warn_implicit_function_decl, -1 };
static const short DiagArray80[] = { diag::ext_missing_type_specifier, -1 };
static const short DiagArray82[] = { diag::ext_typecheck_convert_incompatible_pointer, -1 };
static const short DiagArray83[] = { diag::warn_incomplete_impl, -1 };
static const short DiagArray85[] = { diag::warn_initializer_overrides, diag::warn_subobject_initializer_overrides, -1 };
static const short DiagArray88[] = { diag::warn_falloff_noreturn_function, diag::warn_noreturn_function_has_return_expr, -1 };
static const short DiagArray89[] = { diag::warn_offsetof_non_pod_type, -1 };
static const short DiagArray91[] = { diag::err_pp_bad_paste_ms, -1 };
static const short DiagArray92[] = { diag::warn_parameter_size, diag::warn_return_value_size, -1 };
static const short DiagArray93[] = { diag::warn_impcast_literal_float_to_integer, -1 };
static const short DiagArray94[] = { diag::warn_float_overflow, diag::warn_float_underflow, -1 };
static const short DiagArray95[] = { diag::ext_template_arg_local_type, -1 };
static const short DiagArray96[] = { diag::warn_logical_and_in_logical_or, -1 };
static const short DiagArray97[] = { diag::ext_longlong, -1 };
static const short DiagArray99[] = { diag::warn_non_contravariant_param_types, diag::warn_non_covariant_ret_types, -1 };
static const short DiagArray100[] = { diag::ext_anonymous_record_with_type, diag::ext_enumerator_too_large, diag::ext_flexible_array_empty_aggregate_ms, diag::ext_flexible_array_union_ms, diag::ext_ms_anonymous_struct, diag::ext_ms_enum_fixed_underlying_type, diag::ext_ms_explicit_constructor_call, diag::ext_ms_forward_ref_enum, diag::war_ms_using_declaration_inaccessible, diag::warn_override_exception_spec, diag::warn_pure_function_definition, -1 };
static const short DiagArray101[] = { diag::warn_struct_class_previous_tag_mismatch, diag::warn_struct_class_tag_mismatch, -1 };
static const short DiagArray102[] = { diag::warn_missing_braces, -1 };
static const short DiagArray103[] = { diag::ext_no_declarators, diag::ext_typedef_without_a_name, -1 };
static const short DiagArray104[] = { diag::warn_missing_field_initializers, -1 };
static const short DiagArray107[] = { diag::warn_suggest_noreturn_block, diag::warn_suggest_noreturn_function, -1 };
static const short DiagArray108[] = { diag::warn_missing_prototype, -1 };
static const short DiagSubGroup109[] = { 32, 33, 44, 63, 77, 101, 102, 110, 136, 137, 139, 166, 149, 171, 178, 179, 185, 197, 199, 126, -1 };
static const short DiagArray110[] = { diag::ext_multichar_character_literal, -1 };
static const short DiagSubGroup113[] = { 146, 38, 94, -1 };
static const short DiagArray114[] = { diag::warn_cannot_pass_non_pod_arg_to_vararg, diag::warn_second_parameter_to_va_arg_not_pod, -1 };
static const short DiagArray115[] = { diag::warn_non_virtual_dtor, -1 };
static const short DiagArray116[] = { diag::warn_synthesized_ivar_access, -1 };
static const short DiagArray117[] = { diag::warn_null_arg, -1 };
static const short DiagArray119[] = { diag::warn_null_in_arithmetic_operation, -1 };
static const short DiagArray120[] = { diag::warn_indirection_through_null, -1 };
static const short DiagArray123[] = { diag::ext_out_of_line_declaration, -1 };
static const short DiagArray125[] = { diag::ext_string_too_long, -1 };
static const short DiagArray126[] = { diag::warn_overloaded_virtual, -1 };
static const short DiagArray127[] = { diag::warn_unnecessary_packed, -1 };
static const short DiagArray128[] = { diag::warn_padded_struct_anon_field, diag::warn_padded_struct_field, diag::warn_padded_struct_size, -1 };
static const short DiagArray129[] = { diag::warn_condition_is_assignment, diag::warn_equality_with_extra_parens, diag::warn_precedence_bitwise_rel, diag::warn_precedence_conditional, -1 };
static const short DiagSubGroup129[] = { 96, 21, -1 };
static const short DiagArray130[] = { diag::ext_gnu_ptr_func_arith, diag::ext_gnu_void_ptr, diag::ext_sizeof_function_type, diag::ext_sizeof_void_type, -1 };
static const short DiagArray131[] = { diag::ext_typecheck_convert_incompatible_pointer_sign, -1 };
static const short DiagArray133[] = { diag::warn_unimplemented_protocol_method, -1 };
static const short DiagArray134[] = { diag::warn_objc_property_attr_mutually_exclusive, -1 };
static const short DiagArray136[] = { diag::warn_initializer_out_of_order, -1 };
static const short DiagArray137[] = { diag::ext_return_has_expr, diag::ext_return_missing_expr, diag::warn_falloff_nonvoid_function, diag::warn_maybe_falloff_nonvoid_function, diag::warn_return_missing_expr, -1 };
static const short DiagArray138[] = { diag::warn_unimplemented_selector, -1 };
static const short DiagArray139[] = { diag::warn_self_assignment, -1 };
static const short DiagArray140[] = { diag::warn_semicolon_before_method_body, -1 };
static const short DiagArray142[] = { diag::warn_decl_shadow, -1 };
static const short DiagArray143[] = { diag::warn_shift_result_gt_typewidth, -1 };
static const short DiagArray144[] = { diag::warn_shift_result_sets_sign_bit, -1 };
static const short DiagArray145[] = { diag::warn_impcast_integer_64_32, -1 };
static const short DiagArray146[] = { diag::warn_mixed_sign_comparison, diag::warn_mixed_sign_conditional, -1 };
static const short DiagArray147[] = { diag::warn_impcast_integer_sign, diag::warn_impcast_integer_sign_conditional, -1 };
static const short DiagArray149[] = { diag::warn_sizeof_array_param, -1 };
static const short DiagArray150[] = { diag::warn_sizeof_pointer_expr_memaccess, diag::warn_sizeof_pointer_type_memaccess, -1 };
static const short DiagArray164[] = { diag::warn_strict_multiple_method_decl, -1 };
static const short DiagArray165[] = { diag::ext_typecheck_base_super, -1 };
static const short DiagArray166[] = { diag::warn_case_value_overflow, -1 };
static const short DiagSubGroup166[] = { 168, -1 };
static const short DiagArray168[] = { diag::warn_missing_case1, diag::warn_missing_case2, diag::warn_missing_case3, diag::warn_missing_cases, diag::warn_not_in_enum, -1 };
static const short DiagArray170[] = { diag::warn_comparison_always, diag::warn_lunsigned_always_true_comparison, diag::warn_runsigned_always_true_comparison, -1 };
static const short DiagArray171[] = { diag::trigraph_converted, diag::trigraph_ends_block_comment, diag::trigraph_ignored, diag::trigraph_ignored_block_comment, -1 };
static const short DiagArray173[] = { diag::warn_redefinition_of_typedef, -1 };
static const short DiagArray174[] = { diag::warn_undeclared_selector, -1 };
static const short DiagArray175[] = { diag::warn_pp_undef_identifier, -1 };
static const short DiagArray177[] = { diag::warn_pointer_indirection_from_incompatible_type, diag::warn_undefined_reinterpret_cast, -1 };
static const short DiagArray178[] = { diag::warn_field_is_uninit, diag::warn_uninit_self_reference_in_init, diag::warn_uninit_var, diag::warn_uninit_var_captured_by_block, -1 };
static const short DiagArray179[] = { diag::ext_on_off_switch_syntax, diag::ext_pragma_syntax_eod, diag::ext_stdc_pragma_ignored, diag::warn_pragma_diagnostic_cannot_pop, diag::warn_pragma_diagnostic_invalid, diag::warn_pragma_diagnostic_invalid_option, diag::warn_pragma_diagnostic_invalid_token, diag::warn_pragma_diagnostic_unknown_warning, diag::warn_pragma_ignored, diag::warn_stdc_fenv_access_not_supported, -1 };
static const short DiagArray180[] = { diag::warn_unknown_negative_warning_option, diag::warn_unknown_warning_option, diag::warn_unknown_warning_specifier, -1 };
static const short DiagArray181[] = { diag::ext_template_arg_unnamed_type, -1 };
static const short DiagArray182[] = { diag::warn_unneeded_internal_decl, -1 };
static const short DiagArray183[] = { diag::warn_unneeded_member_function, -1 };
static const short DiagArray184[] = { diag::warn_unreachable, -1 };
static const short DiagSubGroup185[] = { 186, 188, 189, 193, 194, -1 };
static const short DiagArray187[] = { diag::warn_unused_exception_param, -1 };
static const short DiagArray188[] = { diag::warn_unused_function, -1 };
static const short DiagSubGroup188[] = { 182, -1 };
static const short DiagArray189[] = { diag::warn_unused_label, -1 };
static const short DiagArray190[] = { diag::pp_macro_not_used, -1 };
static const short DiagArray191[] = { diag::warn_unused_member_function, -1 };
static const short DiagSubGroup191[] = { 183, -1 };
static const short DiagArray192[] = { diag::warn_unused_parameter, -1 };
static const short DiagArray193[] = { diag::warn_unused_call, diag::warn_unused_expr, diag::warn_unused_property_expr, diag::warn_unused_voidptr, -1 };
static const short DiagArray194[] = { diag::warn_unused_variable, -1 };
static const short DiagArray195[] = { diag::warn_used_but_marked_unused, -1 };
static const short DiagArray196[] = { diag::ext_named_variadic_macro, diag::ext_variadic_macro, -1 };
static const short DiagArray197[] = { diag::warn_incompatible_vectors, -1 };
static const short DiagArray198[] = { diag::ext_vla, -1 };
static const short DiagArray200[] = { diag::warn_weak_vtable, -1 };
static const short DiagSubGroup201[] = { 48, -1 };
#endif // GET_DIAG_ARRAYS


#ifdef GET_DIAG_TABLE
  { 0, "",                              0, DiagSubGroup0 },
  { 16, "#pragma messages",              DiagArray1, 0 },
  { 9, "#warnings",                     DiagArray2, 0 },
  { 14, "-Wc++0x-compat",                DiagArray3, 0 },
  { 3, "abi",                           0, 0 },
  { 7, "address",                       0, 0 },
  { 20, "address-of-temporary",          DiagArray6, 0 },
  { 16, "aggregate-return",              0, 0 },
  { 3, "all",                           0, DiagSubGroup8 },
  { 25, "ambiguous-member-template",     DiagArray9, 0 },
  { 3, "arc",                           DiagArray10, DiagSubGroup10 },
  { 7, "arc-abi",                       DiagArray11, 0 },
  { 21, "arc-non-pod-memaccess",         DiagArray12, 0 },
  { 17, "arc-retain-cycles",             DiagArray13, 0 },
  { 26, "arc-unsafe-retained-assign",    DiagArray14, 0 },
  { 12, "array-bounds",                  DiagArray15, 0 },
  { 17, "atomic-properties",             0, DiagSubGroup16 },
  { 10, "attributes",                    DiagArray17, 0 },
  { 12, "availability",                  0, 0 },
  { 17, "bad-function-cast",             0, 0 },
  { 22, "bind-to-temporary-copy",        DiagArray20, 0 },
  { 22, "bitwise-op-parentheses",        DiagArray21, 0 },
  { 16, "bool-conversions",              DiagArray22, 0 },
  { 23, "builtin-macro-redefined",       DiagArray23, 0 },
  { 10, "c++-compat",                    DiagArray24, 0 },
  { 14, "c++-hex-floats",                DiagArray25, 0 },
  { 12, "c++0x-compat",                  DiagArray26, DiagSubGroup26 },
  { 16, "c++0x-extensions",              DiagArray27, DiagSubGroup27 },
  { 29, "c++0x-static-nonintegral-init", DiagArray28, 0 },
  { 10, "cast-align",                    DiagArray29, 0 },
  { 9, "cast-qual",                     0, 0 },
  { 10, "char-align",                    0, 0 },
  { 15, "char-subscripts",               DiagArray32, 0 },
  { 7, "comment",                       DiagArray33, 0 },
  { 8, "comments",                      0, DiagSubGroup34 },
  { 25, "conditional-uninitialized",     DiagArray35, 0 },
  { 19, "constant-conversion",           DiagArray36, 0 },
  { 24, "constant-logical-operand",      DiagArray37, 0 },
  { 10, "conversion",                    DiagArray38, DiagSubGroup38 },
  { 17, "ctor-dtor-privacy",             0, 0 },
  { 24, "custom-atomic-properties",      DiagArray40, 0 },
  { 27, "declaration-after-statement",   DiagArray41, 0 },
  { 26, "default-arg-special-member",    DiagArray42, 0 },
  { 22, "delegating-ctor-cycles",        DiagArray43, 0 },
  { 23, "delete-non-virtual-dtor",       DiagArray44, 0 },
  { 10, "deprecated",                    DiagArray45, DiagSubGroup45 },
  { 23, "deprecated-declarations",       DiagArray46, 0 },
  { 26, "deprecated-implementations",    DiagArray47, 0 },
  { 27, "deprecated-writable-strings",   DiagArray48, 0 },
  { 21, "disabled-optimization",         0, 0 },
  { 12, "discard-qual",                  0, 0 },
  { 28, "distributed-object-modifiers",  DiagArray51, 0 },
  { 11, "div-by-zero",                   0, 0 },
  { 20, "duplicate-method-arg",          DiagArray53, 0 },
  { 23, "dynamic-class-memaccess",       DiagArray54, 0 },
  { 6, "effc++",                        0, 0 },
  { 10, "empty-body",                    DiagArray56, 0 },
  { 12, "endif-labels",                  0, DiagSubGroup57 },
  { 12, "enum-compare",                  DiagArray58, 0 },
  { 21, "exit-time-destructors",         DiagArray59, 0 },
  { 5, "extra",                         0, DiagSubGroup60 },
  { 12, "extra-tokens",                  DiagArray61, 0 },
  { 11, "float-equal",                   DiagArray62, 0 },
  { 6, "format",                        DiagArray63, DiagSubGroup63 },
  { 17, "format-extra-args",             DiagArray64, 0 },
  { 17, "format-nonliteral",             DiagArray65, DiagSubGroup65 },
  { 15, "format-security",               DiagArray66, 0 },
  { 10, "format-y2k",                    0, 0 },
  { 18, "format-zero-length",            DiagArray68, 0 },
  { 8, "format=2",                      0, DiagSubGroup69 },
  { 19, "four-char-constants",           DiagArray70, 0 },
  { 19, "global-constructors",           DiagArray71, 0 },
  { 3, "gnu",                           DiagArray72, DiagSubGroup72 },
  { 14, "gnu-designator",                DiagArray73, 0 },
  { 14, "header-hygiene",                DiagArray74, 0 },
  { 21, "idiomatic-parentheses",         DiagArray75, 0 },
  { 18, "ignored-qualifiers",            DiagArray76, 0 },
  { 8, "implicit",                      0, DiagSubGroup77 },
  { 26, "implicit-atomic-properties",    DiagArray78, 0 },
  { 29, "implicit-function-declaration", DiagArray79, 0 },
  { 12, "implicit-int",                  DiagArray80, 0 },
  { 6, "import",                        0, 0 },
  { 26, "incompatible-pointer-types",    DiagArray82, 0 },
  { 25, "incomplete-implementation",     DiagArray83, 0 },
  { 9, "init-self",                     0, 0 },
  { 21, "initializer-overrides",         DiagArray85, 0 },
  { 6, "inline",                        0, 0 },
  { 19, "int-to-pointer-cast",           0, 0 },
  { 16, "invalid-noreturn",              DiagArray88, 0 },
  { 16, "invalid-offsetof",              DiagArray89, 0 },
  { 11, "invalid-pch",                   0, 0 },
  { 19, "invalid-token-paste",           DiagArray91, 0 },
  { 19, "large-by-value-copy",           DiagArray92, 0 },
  { 18, "literal-conversion",            DiagArray93, 0 },
  { 13, "literal-range",                 DiagArray94, 0 },
  { 24, "local-type-template-args",      DiagArray95, 0 },
  { 22, "logical-op-parentheses",        DiagArray96, 0 },
  { 9, "long-long",                     DiagArray97, 0 },
  { 4, "main",                          0, 0 },
  { 17, "method-signatures",             DiagArray99, 0 },
  { 9, "microsoft",                     DiagArray100, 0 },
  { 15, "mismatched-tags",               DiagArray101, 0 },
  { 14, "missing-braces",                DiagArray102, 0 },
  { 20, "missing-declarations",          DiagArray103, 0 },
  { 26, "missing-field-initializers",    DiagArray104, 0 },
  { 24, "missing-format-attribute",      0, 0 },
  { 20, "missing-include-dirs",          0, 0 },
  { 16, "missing-noreturn",              DiagArray107, 0 },
  { 18, "missing-prototypes",            DiagArray108, 0 },
  { 4, "most",                          0, DiagSubGroup109 },
  { 9, "multichar",                     DiagArray110, 0 },
  { 14, "nested-externs",                0, 0 },
  { 11, "newline-eof",                   0, 0 },
  { 7, "non-gcc",                       0, DiagSubGroup113 },
  { 15, "non-pod-varargs",               DiagArray114, 0 },
  { 16, "non-virtual-dtor",              DiagArray115, 0 },
  { 15, "nonfragile-abi2",               DiagArray116, 0 },
  { 7, "nonnull",                       DiagArray117, 0 },
  { 21, "nonportable-cfstrings",         0, 0 },
  { 15, "null-arithmetic",               DiagArray119, 0 },
  { 16, "null-dereference",              DiagArray120, 0 },
  { 14, "old-style-cast",                0, 0 },
  { 20, "old-style-definition",          0, 0 },
  { 23, "out-of-line-declaration",       DiagArray123, 0 },
  { 8, "overflow",                      0, 0 },
  { 18, "overlength-strings",            DiagArray125, 0 },
  { 18, "overloaded-virtual",            DiagArray126, 0 },
  { 6, "packed",                        DiagArray127, 0 },
  { 6, "padded",                        DiagArray128, 0 },
  { 11, "parentheses",                   DiagArray129, DiagSubGroup129 },
  { 13, "pointer-arith",                 DiagArray130, 0 },
  { 12, "pointer-sign",                  DiagArray131, 0 },
  { 19, "pointer-to-int-cast",           0, 0 },
  { 8, "protocol",                      DiagArray133, 0 },
  { 21, "readonly-setter-attrs",         DiagArray134, 0 },
  { 15, "redundant-decls",               0, 0 },
  { 7, "reorder",                       DiagArray136, 0 },
  { 11, "return-type",                   DiagArray137, 0 },
  { 8, "selector",                      DiagArray138, 0 },
  { 11, "self-assign",                   DiagArray139, 0 },
  { 28, "semicolon-before-method-body",  DiagArray140, 0 },
  { 14, "sequence-point",                0, 0 },
  { 6, "shadow",                        DiagArray142, 0 },
  { 14, "shift-overflow",                DiagArray143, 0 },
  { 19, "shift-sign-overflow",           DiagArray144, 0 },
  { 16, "shorten-64-to-32",              DiagArray145, 0 },
  { 12, "sign-compare",                  DiagArray146, 0 },
  { 15, "sign-conversion",               DiagArray147, 0 },
  { 10, "sign-promo",                    0, 0 },
  { 21, "sizeof-array-argument",         DiagArray149, 0 },
  { 24, "sizeof-pointer-memaccess",      DiagArray150, 0 },
  { 15, "stack-protector",               0, 0 },
  { 15, "strict-aliasing",               0, 0 },
  { 17, "strict-aliasing=0",             0, 0 },
  { 17, "strict-aliasing=1",             0, 0 },
  { 17, "strict-aliasing=2",             0, 0 },
  { 15, "strict-overflow",               0, 0 },
  { 17, "strict-overflow=0",             0, 0 },
  { 17, "strict-overflow=1",             0, 0 },
  { 17, "strict-overflow=2",             0, 0 },
  { 17, "strict-overflow=3",             0, 0 },
  { 17, "strict-overflow=4",             0, 0 },
  { 17, "strict-overflow=5",             0, 0 },
  { 17, "strict-prototypes",             0, 0 },
  { 21, "strict-selector-match",         DiagArray164, 0 },
  { 27, "super-class-method-mismatch",   DiagArray165, 0 },
  { 6, "switch",                        DiagArray166, DiagSubGroup166 },
  { 14, "switch-default",                0, 0 },
  { 11, "switch-enum",                   DiagArray168, 0 },
  { 5, "synth",                         0, 0 },
  { 20, "tautological-compare",          DiagArray170, 0 },
  { 9, "trigraphs",                     DiagArray171, 0 },
  { 11, "type-limits",                   0, 0 },
  { 20, "typedef-redefinition",          DiagArray173, 0 },
  { 19, "undeclared-selector",           DiagArray174, 0 },
  { 5, "undef",                         DiagArray175, 0 },
  { 18, "undefined-internal",            0, 0 },
  { 26, "undefined-reinterpret-cast",    DiagArray177, 0 },
  { 13, "uninitialized",                 DiagArray178, 0 },
  { 15, "unknown-pragmas",               DiagArray179, 0 },
  { 22, "unknown-warning-option",        DiagArray180, 0 },
  { 26, "unnamed-type-template-args",    DiagArray181, 0 },
  { 29, "unneeded-internal-declaration", DiagArray182, 0 },
  { 24, "unneeded-member-function",      DiagArray183, 0 },
  { 16, "unreachable-code",              DiagArray184, 0 },
  { 6, "unused",                        0, DiagSubGroup185 },
  { 15, "unused-argument",               0, 0 },
  { 26, "unused-exception-parameter",    DiagArray187, 0 },
  { 15, "unused-function",               DiagArray188, DiagSubGroup188 },
  { 12, "unused-label",                  DiagArray189, 0 },
  { 13, "unused-macros",                 DiagArray190, 0 },
  { 22, "unused-member-function",        DiagArray191, DiagSubGroup191 },
  { 16, "unused-parameter",              DiagArray192, 0 },
  { 12, "unused-value",                  DiagArray193, 0 },
  { 15, "unused-variable",               DiagArray194, 0 },
  { 22, "used-but-marked-unused",        DiagArray195, 0 },
  { 15, "variadic-macros",               DiagArray196, 0 },
  { 18, "vector-conversions",            DiagArray197, 0 },
  { 3, "vla",                           DiagArray198, 0 },
  { 21, "volatile-register-var",         0, 0 },
  { 12, "weak-vtables",                  DiagArray200, 0 },
  { 13, "write-strings",                 0, DiagSubGroup201 },
#endif // GET_DIAG_TABLE


#ifdef GET_CATEGORY_TABLE
CATEGORY("", DiagCat_None)
CATEGORY("Parse Issue", DiagCat_Parse_Issue)
CATEGORY("Lexical or Preprocessor Issue", DiagCat_Lexical_or_Preprocessor_Issue)
CATEGORY("Semantic Issue", DiagCat_Semantic_Issue)
CATEGORY("Automatic Reference Counting Issue", DiagCat_Automatic_Reference_Counting_Issue)
CATEGORY("Inline Assembly Issue", DiagCat_Inline_Assembly_Issue)
CATEGORY("Related Result Type Issue", DiagCat_Related_Result_Type_Issue)
CATEGORY("#warning Directive", DiagCat__warning_Directive)
CATEGORY("Deprecations", DiagCat_Deprecations)
CATEGORY("Format String Issue", DiagCat_Format_String_Issue)
CATEGORY("Value Conversion Issue", DiagCat_Value_Conversion_Issue)
CATEGORY("#pragma message Directive", DiagCat__pragma_message_Directive)
CATEGORY("Unused Entity Issue", DiagCat_Unused_Entity_Issue)
#endif // GET_CATEGORY_TABLE

