/*
 * -----  Scout Programming Language -----
 *
 * This file is distributed under an open source license by Los Alamos
 * National Security, LCC.  See the file License.txt (located in the
 * top level of the source distribution) for details.
 *
 *-----
 *
 * A quick hack to take a OpenGL Shading Language source file and
 * convert it into a quoted constant char string suitable for
 * inclusion within a program.  The primary goal here is to embed
 * shaders within our runtime vs. having to manage fragment shaders
 * as include files at runtime...
 *
 * Usage: glsl2cstr --in glsl-file --out c-file --name name
 *
 * The 'varname' parameter specifies the variable name for the constant
 * string in the generated source.
 */

#include <iostream>
#include <fstream>
using namespace std;

#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <string.h>

// ----- read_glsl
//
char* read_glsl(const char* filename)
{
  ifstream is;
  is.open(filename, ios::binary);
  if (is.is_open()) {
    cout << "reading '" << filename << "'...";
    is.seekg(0, ios::end);
    int length = is.tellg();
    is.seekg(0, ios::beg);

    char* src = new char[length+1];
    is.read(src, length-1);
    src[length-1] = '\0';
    is.close();
    cout << "\n";
    return src;
  } else {
    return 0;
  }
}


// ----- save_glsl
//
bool save_glsl(const char* filename, const char *str_var_name, const char* src)
{
  ofstream os;
  os.open(filename, ios::out);
  if (os.is_open()) {
    cout << "saving '" << filename << "...";

    int i = 0;

    os << "\n";
    os << "// Auto-generated by glsl-to-c-str (glsl file to C string) utility.\n";
    os << "\n";
    os << "#ifndef __SCRT_GL_" << str_var_name << "_H_\n";
    os << "#define __SCRT_GL_" << str_var_name << "_H_\n\n";
    os << "const char* " << str_var_name << " = \n\t\"";
    while(src[i] != '\0') {
      if (src[i] == '\n') {
        os << "\\n\"\n";
        os << "\t\"";
      } else {
        os << src[i];
      }
      ++i;
    }
    os << "\";\n\n";
    os << "#endif\n\n";
    os.close();
    cout << "\n";
    return true;
  } else {
    return false;
  }
}


int main(int argc, char *argv[])
{
  char *infile = 0, *outfile = 0, *varname = 0;

  while(1) {

    static struct option long_options[] =
      {
        { "in",      required_argument, 0, 'i'},
        { "out",     required_argument, 0, 'o'},
        { "varname", required_argument, 0, 'n'},
        { 0, 0, 0, 0 }
      };

    int option_index = 0;

    int c = getopt_long(argc, argv, "i:o:n:", long_options, &option_index);

    if (c == -1) {
      break;
    }

    switch(c) {

      case 'i':
        if (infile != 0) {
          cerr << "error -- multiple input files specified.\n";
          delete []infile;
          delete []outfile;
          delete []varname;
          return 1;
        }

        infile = new char[strlen(optarg)+1];
        strcpy(infile, optarg);
        break;

      case 'o':
        if (outfile != 0) {
          cerr << "error -- multiple output files specified.\n";
          delete []infile;
          delete []outfile;
          delete []varname;
          return 1;
        }

        outfile = new char[strlen(optarg)+1];
        strcpy(outfile, optarg);
        break;

      case 'n':
        if (varname != 0) {
          cerr << "error -- multiple variable output names specified.\n";
          delete []infile;
          delete []outfile;
          delete []varname;
          return 1;
        }

        varname = new char[strlen(optarg)+1];
        strcpy(varname, optarg);
        break;

      case '?':
        break;

      default:
        // getopt already provied error message.
        delete []infile;
        delete []outfile;
        delete []varname;
        return 1;
    }
  }

  if (optind < argc) {

    while(optind < argc) {
      cerr << "invalid option -- " << argv[optind++] << endl;
    }

    delete []infile;
    delete []outfile;
    delete []varname;

    return 1;
  }

  if (infile  == 0 || outfile == 0 ||varname == 0) {
    cerr << "usage: glsl2cstr --in glsl-file --out c-file --varname name\n";
    cerr << "   glsl-file  : input source file for glsl vertex/fragment shader\n";
    cerr << "   c-file     : output C source file with const char shader source\n";
    cerr << "   name       : variable name for const char scoure string\n";
    return 1;
  } else {
    
    char *src_str = read_glsl(infile);
    
    if (src_str == 0) {
      cerr << "error reading input file.\n";
      delete []infile;
      delete []outfile;
      delete []varname;
      return 1;
    } else {
      
      if (! save_glsl(outfile, varname, src_str)) {
        cerr << "error saving converted GLSL program to '" << outfile <<"'.\n";
        delete []infile;
        delete []outfile;
        delete []varname;        
        delete []src_str;
        return 1;
      }
      
    }
  }

  delete []infile;
  delete []outfile;
  delete []varname;
  return 0;
}



